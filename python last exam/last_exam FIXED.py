# -*- coding: utf-8 -*-
"""Last Exam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15nWpj5BJ8TwQJCpx-XehQlZZlJsgtNiY

**Problema 1: lenght of last word**

Version simple:
"""

class Solution(object):
    def lengthOfLastWordSimple(self, oracion):
        oracion= oracion.strip()
        if not oracion:
            return 0
        palabras_de_ejemplo = oracion.split()
        return len(palabras_de_ejemplo[-1])

if __name__ == "__main__":
    VotS = Solution()
    print(VotS.lengthOfLastWordSimple("Hola profe, le hablo desde colab "))
    print(VotS.lengthOfLastWordSimple("Tiene que ver Mision Imposible, muy buena"))
    print(VotS.lengthOfLastWordSimple("Quiero comer un rib eye después de examenes"))

#Este problema fue sacado de LeetCode, siendo más especificamente el número #58

"""Version Opitimizada:"""

class Solution(object):
    def lengthOfLastWord(self, oracion):
        i = len(oracion) - 1
        length = 0

        while i >= 0 and oracion[i] == ' ':
            i -= 1

        while i >= 0 and oracion[i] != ' ':
            length += 1
            i -= 1

        return length

if __name__ == "__main__":
    VotS = Solution()
    print(VotS.lengthOfLastWord("Hola profe, le hablo desde colab"))
    print(VotS.lengthOfLastWord("Tiene que ver Mision Imposible, muy buena"))
    print(VotS.lengthOfLastWord("Quiero comer un rib eye después de examenes"))

"""**Problema 2: Valid Palindrome**

Version simple:
"""

class Solution:
    def isPalindrome(self, oracion: str) -> bool:
        filtered = ''.join(letra_individual.lower() for letra_individual in oracion if letra_individual.isalnum())
        return filtered == filtered[::-1]

Statement = "Simon Pedro es mi apostol fav"
VotS = Solution()
print(VotS.isPalindrome(Statement))

"""Version optimizada:"""

class Solution:
    def isPalindromo(self, oracion: str) -> bool:
        left, right = 0, len(oracion) - 1
        while left < right:
            if not oracion[left].isalnum():
                left += 1
                continue
            if not oracion[right].isalnum():
                right -= 1
                continue
            if oracion[left].lower() != oracion[right].lower():
                return False
            left += 1
            right -= 1
        return True

Statement = "Simon Pedro es mi apostol fav"
Statement_Two="A Santa lived as a devil at NASA"
VotS = Solution()
print(VotS.isPalindromo(Statement))
print(VotS.isPalindromo(Statement_Two))

"""**Problema 3: Plus One**

Version simple:
"""

class Solution(object):
    def plusOne(self, digits):
        num_empty = ""
        for digit in digits:
            num_empty += str(digit)

        numero_real = int(num_empty) + 1

        resultado = []
        for ch in str(numero_real):
            resultado.append(int(ch))

        return resultado

VotS= Solution()
print(VotS.plusOne([120, 9, 57, 303]))
print(VotS.plusOne([4, 3, 2, 1]))
print(VotS.plusOne([10]))

"""Version Optimizada:"""

class Solution(object):
    def plusOne(self, digits):
        numero_real = 0
        for digit in digits:
            numero_real = numero_real * 10 + digit

        numero_real += 1

        return [int(d) for d in str(numero_real)]

VotS = Solution()
print(VotS.plusOne([88, 25, 32]))
print(VotS.plusOne([23, 35, 72, 51]))
print(VotS.plusOne([9]))

"""**Problema 4: Roman to Integrer** (Uno de mis favoritos)

Version simple
"""

class Solution(object):
    def CalcularValoresRomanos(self, valorEnTexto):
        Valores_de_las_letras = {
            "I": 1,
            "V": 5,
            "X": 10,
            "L": 50,
            "C": 100,
            "D": 500,
            "M": 1000
        }

        resultado  = 0
        i = 0
        while i < len(valorEnTexto):
            if i + 1 < len(valorEnTexto):
                LETTERS = valorEnTexto[i] + valorEnTexto[i + 1]
                if LETTERS == "IV":
                    resultado += 4
                    i += 2
                    continue
                elif LETTERS == "IX":
                    resultado += 9
                    i += 2
                    continue
                elif LETTERS == "XL":
                    resultado += 40
                    i += 2
                    continue
                elif LETTERS == "XC":
                    resultado += 90
                    i += 2
                    continue
                elif LETTERS == "CD":
                    resultado += 400
                    i += 2
                    continue
                elif LETTERS == "CM":
                    resultado += 900
                    i += 2
                    continue

            resultado += Valores_de_las_letras[valorEnTexto[i]]
            i += 1

        return resultado

VotS = Solution()
print(VotS.CalcularValoresRomanos("CXX")) #Numero de un soldado
print(VotS.CalcularValoresRomanos("LXXVII"+"XLX"))   #numero especial
        #Con este me acorde de mis primeros codigos todos mal hechos jeje

"""Version Optimizada"""

class Solution(object):
    def romanToInt(self, valorEnTexto):
        Valores_de_las_letras = {
            "I": 1,
            "V": 5,
            "X": 10,
            "L": 50,
            "C": 100,
            "D": 500,
            "M": 1000
        }

        total = Valores_de_las_letras[valorEnTexto[-1]]
        for i in range(len(valorEnTexto) - 2, -1, -1):
            if Valores_de_las_letras[valorEnTexto[i]] < Valores_de_las_letras[valorEnTexto[i + 1]]:
                total -= Valores_de_las_letras[valorEnTexto[i]]
            else:
                total += Valores_de_las_letras[valorEnTexto[i]]

        return total

VotS = Solution()
print(VotS.romanToInt("CXX")) #Numero de un soldado
print(VotS.romanToInt("LXXVII"+"XLX"))   #numero especial
print(VotS.romanToInt("MCMLXXXVI")) #Año de la pelicula de TOP GUN MAVERICK

"""**Problema 5: Perfect Number** (Uno de mis favoritos)

Version simple:
"""

class Solution(object):
    def checkPerfectNumber(self, num):
        if num <= 1:
            return False

        suma_total = 0
        for i in range(1, num):
            if num % i == 0:
                suma_total += i

        return suma_total == num

if __name__ == "__main__":
    ValorDelUsuario = int(input("Dame un numero: "))
    VotS = Solution()
    resultado = VotS.checkPerfectNumber(ValorDelUsuario)
    print("¿Será verdadero o falso?,pues es...", resultado)

"""Version Optimizada"""

class Solution(object):
    def checkPerfectNumber(self, num):
        if num <= 1:
            return False
        REP = 1
        i = 2
        while i * i <= num:
            if num % i == 0:
                REP += i
                if i != num // i:
                    REP += num // i
            i += 1

        return REP == num

if __name__ == "__main__":
    ValorDelUsuario = int(input("Dame un numero: "))
    VotS = Solution() #vots es Variable of the Solution, me gusta ponerle nombres fancys
    resultado = VotS.checkPerfectNumber(ValorDelUsuario)
    print("¿Será verdadero (perfecto) o falso(no perfecto)?,pues es...", resultado)

"""**Problema 6: Majority Element**

Version simple
"""

class Solution(object):
    def majorityElement(self, nums):
        nums.sort()
        n = len(nums)
        for Posible_MajorityElement in nums:
            count = 0
            for num in nums:
                if num == Posible_MajorityElement:
                    count += 1
            if count > n // 2:
                return Posible_MajorityElement

if __name__ == "__main__":
    ValorDelUsuario = input("Dame varios numeros, pero espaciados (Ejemplo: 2 3 8): ")
    nums = list(map(int, ValorDelUsuario.strip().split()))
    VotS = Solution()
    resultado = VotS.majorityElement(nums)
    print("EL MAJORITY ELEMENTE ES:", resultado)

"""Version Optimizada"""

class Solution(object):
    def majorityElement(self, nums):
        el_contador = 0
        Un_Posible_MajorityElement = None
        for num in nums:
            if el_contador == 0:
                Un_Posible_MajorityElement = num
            el_contador += (1 if num == Un_Posible_MajorityElement else -1)
        return Un_Posible_MajorityElement

if __name__ == "__main__":
    ValorDelUsuario = input("Dame varios numeros, pero espaciados (Ejemplo: 2 3 8): ")
    nums = list(map(int, ValorDelUsuario.strip().split()))
    VotS = Solution()
    resultado = VotS.majorityElement(nums)
    print("EL MAJORITY ELEMENT ES:", resultado)

"""**Problema 7: Power Of Two**

Version simple
"""

class Solution(object):
    def isPowerOfTwo(self, n):
        if n <= 0:
            return False
        potencia = 1
        while potencia < n:
            potencia *= 2
        return potencia == n

if __name__ == "__main__":
    ValorDelUsuario= int(input("Dame un numero: "))
    VotS = Solution()
    resultado = VotS.isPowerOfTwo(ValorDelUsuario)
    print("¿Será acaso, potencia de dos?", resultado)

"""Version Optimizada"""

class Solution(object):
    def isPowerOfTwo(self, n):
        return n > 0 and (n & (n - 1)) == 0

if __name__ == "__main__":
    ValorDelUsuario= int(input("Dame un número "))
    VotS = Solution()
    resultado = VotS.isPowerOfTwo(ValorDelUsuario)
    print("¿Será acaso, potencia de dos?", resultado)

"""**Problema 8: Move Zeroes**

Version simple
"""

class Solution(object):
    def moveZeroes(self, nums):
        contador_de_ceros = 0

        i = 0
        while i < len(nums):
            if nums[i] == 0:
                nums.remove(0)
                contador_de_ceros += 1
            else:
                i += 1


        for _ in range(contador_de_ceros):
            nums.append(0)

if __name__ == "__main__":
    ValorDelUsuario = input("Dame varios numeros, pero espaciados (Ejemplo: 2 3 8):")
    nums = list(map(int, ValorDelUsuario.strip().split()))
    VotS = Solution()
    VotS.moveZeroes(nums)
    print("Nuevo orden con los ceros recorridos:", nums)

"""Version Optimizada"""

class Solution(object):
    def moveZeroes(self, nums):
        contador_de_ceros = 0

        while 0 in list(nums):
            index = -1
            for i in range(len(nums)):
                if nums[i] == 0:
                    index = i
                    break
            if index != -1:
                nums.pop(index) #pop es pa recorrer pa todos los elementos
                contador_de_ceros += 1
        agrupacion_de_ceros = []
        for _ in range(contador_de_ceros):
            agrupacion_de_ceros.append(0)

        for cero in agrupacion_de_ceros:
            nums += [cero]

if __name__ == "__main__":
    ValorDelUsuario = input("Dame varios numeros, pero espaciados (Ejemplo: 2 3 8): ")
    nums = list(map(int, ValorDelUsuario.strip().split()))
    VotS = Solution()
    VotS.moveZeroes(nums)
    print("Nuevo orden con los ceros recorridos:", nums)

"""**Problema 9: Missing Numbers**

Version simple
"""

class Solution(object):
    def missingNumber(self, nums):

        Valor_de_N = len(nums)
        total = Valor_de_N + 1

        i = 0
        while i < total:
            encontrado = False

            j = 0
            while j < len(nums):
                if nums[j] == i:
                    encontrado = True
                    break
                j += 1

            if not encontrado:
                return i

            i += 1

if __name__ == "__main__":
    ValorDelUsuario = input("Dame varios numeros, pero espaciados (Ejemplo: 2 3 8)")
    nums = list(map(int, ValorDelUsuario.strip().split()))
    VotS = Solution()
    resultado = VotS.missingNumber(nums)
    print("El numero que falta es...", resultado)

"""Version Optimizada"""

class Solution(object):
    def missingNumber(self, nums):
        n = len(nums)
        suma_soñada = n * (n + 1) // 2
        suma_verdadera = sum(nums)
        return suma_soñada - suma_verdadera

if __name__ == "__main__":
    ValorDelUsuario = input("Dame varios numeros, pero espaciados (Ejemplo: 2 3 8): ")
    nums = list(map(int, ValorDelUsuario.strip().split()))
    VotS = Solution()
    resultado = VotS.missingNumber(nums)
    print("El numero que falta es...", resultado)

"""**Problema 10: Larger Group**

Version simple
"""

class Solution(object):
    def countLargestGroup(self, ValorDelUsuario):
        grupos = {}

        for i in range(1, ValorDelUsuario + 1):
            suma_digitos = sum(map(int, str(i)))
            if suma_digitos not in grupos:
                grupos[suma_digitos] = [i]
            else:
                grupos[suma_digitos].append(i)

        max_tamaño = 0
        contador = 0

        for clave in grupos:
            tam = len(grupos[clave])
            if tam > max_tamaño:
                max_tamaño = tam
                contador = 1
            elif tam == max_tamaño:
                contador += 1

        return contador

if __name__ == "__main__":
    ValorDelUsuario = int(input("Dame un valor: "))
    VotS = Solution()
    resultado = VotS.countLargestGroup(ValorDelUsuario)
    print("Grupo de mayor tamaño es :", resultado)

"""Version Optimizada"""

from collections import Counter

class Solution(object):
    def countLargestGroup(self, ValorDelUsuario):
        contador2 = Counter()

        for i in range(1, ValorDelUsuario + 1):
            suma = 0
            temp = i
            while temp > 0:
                suma += temp % 10
                temp //= 10
            contador2[suma] += 1

        grupo_maximo = max(contador2.values())
        return sum(1 for v in contador2.values() if v == grupo_maximo)

if __name__ == "__main__":
    ValorDelUsuario= int(input("Dame un valor "))
    VotS = Solution()
    resultado = VotS.countLargestGroup(ValorDelUsuario)
    print("Grupo de mayor tamaño es:", resultado)